# Image Steganography using Tkinter and PIL

from tkinter import *
import tkinter.filedialog
from tkinter import messagebox
from PIL import ImageTk, Image
from io import BytesIO
import os

class IMG_Stegno:
    output_image_size = 0

    # Main frame / homepage
    def main(self, root):
        root.title('ImageSteganography by DataFlair')
        root.geometry('500x600')
        root.resizable(width=False, height=False)
        root.config(bg='#e3f4f1')

        frame = Frame(root, bg='#e3f4f1')
        frame.grid()

        title = Label(frame, text='DataFlair Image Steganography', font=('Times New Roman', 25, 'bold'), bg='#e3f4f1')
        title.grid(pady=10, row=1)

        encode = Button(frame, text="Encode", command=lambda: self.encode_frame1(frame), font=('Helvetica', 14), bg='#e8c1c7', padx=14)
        encode.grid(row=2)

        decode = Button(frame, text="Decode", command=lambda: self.decode_frame1(frame), font=('Helvetica', 14), bg='#e8c1c7', padx=14)
        decode.grid(pady=12, row=3)

        root.grid_rowconfigure(1, weight=1)
        root.grid_columnconfigure(0, weight=1)

    # Back button function to go to main frame
    def back(self, frame):
        frame.destroy()
        self.main(root)

    # Frame to choose image for encoding
    def encode_frame1(self, F):
        F.destroy()
        F2 = Frame(root, bg='#e3f4f1')
        F2.grid()

        label1 = Label(F2, text='Select the Image in which \nyou want to hide text :', font=('Times New Roman', 25, 'bold'), bg='#e3f4f1')
        label1.grid(pady=20)

        button_bws = Button(F2, text='Select', command=lambda: self.encode_frame2(F2), font=('Helvetica', 18), bg='#e8c1c7')
        button_bws.grid(pady=5)

        button_back = Button(F2, text='Cancel', command=lambda: self.back(F2), font=('Helvetica', 18), bg='#e8c1c7')
        button_back.grid(pady=15)

    # Frame to choose image for decoding
    def decode_frame1(self, F):
        F.destroy()
        d_f2 = Frame(root, bg='#e3f4f1')
        d_f2.grid()

        label1 = Label(d_f2, text='Select Image with Hidden text:', font=('Times New Roman', 25, 'bold'), bg='#e3f4f1')
        label1.grid(pady=20)

        button_bws = Button(d_f2, text='Select', command=lambda: self.decode_frame2(d_f2), font=('Helvetica', 18), bg='#e8c1c7')
        button_bws.grid(pady=5)

        button_back = Button(d_f2, text='Cancel', command=lambda: self.back(d_f2), font=('Helvetica', 18), bg='#e8c1c7')
        button_back.grid(pady=15)

    # Second encode screen: show image, take input, encode data
    def encode_frame2(self, e_F2):
        myfile = tkinter.filedialog.askopenfilename(filetypes=[('Image Files', '*.png *.jpg *.jpeg'), ('All Files', '*.*')])
        if not myfile:
            messagebox.showerror("Error", "You have selected nothing!")
            return

        e_pg = Frame(root, bg='#e3f4f1')
        e_pg.grid(row=1)
        e_F2.destroy()

        my_img = Image.open(myfile)
        new_image = my_img.resize((300, 200))
        img = ImageTk.PhotoImage(new_image)

        Label(e_pg, text='Selected Image', font=('Helvetica', 14, 'bold'), bg='#e3f4f1').grid(pady=10)
        board = Label(e_pg, image=img)
        board.image = img
        board.grid()

        Label(e_pg, text='Enter the message', font=('Helvetica', 14, 'bold'), bg='#e3f4f1').grid(pady=15)
        text_a = Text(e_pg, width=50, height=10)
        text_a.grid()

        Button(e_pg, text='Encode', font=('Helvetica', 14), bg='#e8c1c7',
               command=lambda: [self.enc_fun(text_a, my_img), self.back(e_pg)]).grid(pady=10)

        Button(e_pg, text='Cancel', font=('Helvetica', 14), bg='#e8c1c7',
               command=lambda: self.back(e_pg)).grid()

    # Decode image and show hidden message
    def decode_frame2(self, d_F2):
        myfile = tkinter.filedialog.askopenfilename(filetypes=[('Image Files', '*.png *.jpg *.jpeg'), ('All Files', '*.*')])
        if not myfile:
            messagebox.showerror("Error", "You have selected nothing!")
            return

        d_F3 = Frame(root, bg='#e3f4f1')
        d_F3.grid(row=1)
        d_F2.destroy()

        my_img = Image.open(myfile)
        new_image = my_img.resize((300, 200))
        img = ImageTk.PhotoImage(new_image)

        Label(d_F3, text='Selected Image :', font=('Helvetica', 14, 'bold'), bg='#e3f4f1').grid(pady=10)
        board = Label(d_F3, image=img)
        board.image = img
        board.grid()

        hidden_data = self.decode(my_img)

        Label(d_F3, text='Hidden data is :', font=('Helvetica', 14, 'bold'), bg='#e3f4f1').grid(pady=10)
        text_a = Text(d_F3, width=50, height=10)
        text_a.insert(INSERT, hidden_data)
        text_a.configure(state='disabled')
        text_a.grid()

        Button(d_F3, text='Cancel', font=('Helvetica', 14), bg='#e8c1c7',
               command=lambda: self.back(d_F3)).grid(pady=15)

    # Decode hidden message from image
    def decode(self, image):
        image_data = iter(image.getdata())
        data = ''
        while True:
            pixels = [value for value in next(image_data)[:3] +
                      next(image_data)[:3] +
                      next(image_data)[:3]]
            binary_str = ''.join(['0' if i % 2 == 0 else '1' for i in pixels[:8]])
            data += chr(int(binary_str, 2))
            if pixels[-1] % 2 != 0:
                return data

    # Convert data to binary list
    def generate_Data(self, data):
        return [format(ord(i), '08b') for i in data]

    # Modify pixels with the binary data
    def modify_Pix(self, pix, data):
        dataList = self.generate_Data(data)
        imgData = iter(pix)

        for i in range(len(dataList)):
            pixels = [value for value in next(imgData)[:3] +
                      next(imgData)[:3] +
                      next(imgData)[:3]]
            for j in range(8):
                if (dataList[i][j] == '0') and (pixels[j] % 2 != 0):
                    pixels[j] -= 1
                elif (dataList[i][j] == '1') and (pixels[j] % 2 == 0):
                    pixels[j] -= 1

            # Set ending flag
            if i == len(dataList) - 1:
                if pixels[-1] % 2 == 0:
                    pixels[-1] -= 1
            else:
                if pixels[-1] % 2 != 0:
                    pixels[-1] -= 1

            yield tuple(pixels[0:3])
            yield tuple(pixels[3:6])
            yield tuple(pixels[6:9])

    # Encode the binary data into a new image
    def encode_enc(self, newImg, data):
        w = newImg.size[0]
        (x, y) = (0, 0)
        for pixel in self.modify_Pix(newImg.getdata(), data):
            newImg.putpixel((x, y), pixel)
            x = 0 if x == w - 1 else x + 1
            y = y + 1 if x == 0 else y

    # Function to execute encoding and save the result
    def enc_fun(self, text_a, myImg):
        data = text_a.get("1.0", "end-1c")
        if not data:
            messagebox.showinfo("Alert", "Kindly enter text in TextBox")
            return

        newImg = myImg.copy()
        self.encode_enc(newImg, data)
        temp = os.path.splitext(os.path.basename(myImg.filename))[0]
        save_path = tkinter.filedialog.asksaveasfilename(initialfile=temp, defaultextension=".png", filetypes=[("PNG files", "*.png")])
        if save_path:
            newImg.save(save_path)
            messagebox.showinfo("Success", f"Encoding Successful\nFile is saved as {os.path.basename(save_path)}")

# GUI Execution
root = Tk()
app = IMG_Stegno()
app.main(root)
root.mainloop()
